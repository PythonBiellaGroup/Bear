# PYTHON BIELLA GROUP MANI TEMPLATE

# All the tags are singular names
# Remember to have the same folder structure, to configure the gitlab in ~/.ssh/config with your ssh key
# It's not possible use HTTPS connections, just ssh.
# https://github.com/alajmo/mani
# https://dev.to/alajmo/mani-a-cli-tool-to-manage-multiple-repositories-1eg

# USEFULL COMMANDS
# mani list projects || see list of the projects
# mani describe tasks || describe list of tasks
# mani describe projects || describe list of projects
# mani sync || syncronize all the repositories and download
# mani list projects --tree || see list of the projects in a folder tree
# mani exec --all --output table --parallel 'find . -type f | wc -l' || count number of files in each project in parallel
# mani describe task git-overview || describe a specific task
# mani run git-status --tags library || launch a command for some specific tags
# mani exec --all --output table --parallel 'find . -type f | wc -l' || run custom command for all projects
# mani run git-overview  -t bash -d frontend/ -o table || run a task that have multiple commands and display the result in a table

# mani run update-all || automatically fetch, clone and checkout all the branches in parallel

###############################################
##### Collection of global specifications #####
###############################################

specs:
  custom:
    output: table
    parallel: true

targets:
  all:
    all: true

themes:
  custom:
    table:
      options:
        draw_border: true
        separate_columns: true
        separate_header: true
        separate_rows: true

############################################
##### Collection of Tasks and commands #####
############################################

### TASKS
tasks:
  hello:
    desc: Print Hello World
    cmd: echo "Hello World"

  branch-all:
    desc: Download git and all branches
    spec: custom
    parallel: true
    target: all
    cmd: |
      for branch in $(git branch -r | grep -v '\->' | sed 's/.*origin\///'); do
        git checkout $branch || git checkout -b $branch origin/$branch
      done

  branch-all-force:
    desc: Download git and all branches
    spec: custom
    parallel: true
    target: all
    cmd: |
      for branch in $(git branch -r | grep -v '\->' | sed 's/.*origin\///'); do
            git checkout $branch || git checkout -b $branch origin/$branch || (git stash && git checkout $branch || git checkout -b $branch origin/$branch)
          done

  update-all:
    desc: Download git and all branches
    spec: custom
    parallel: true
    target: all
    commands:
      - task: git-fetch-pull
      - task: branch-all

  git-overview:
    desc: show branch, local and remote diffs, last commit and date
    spec: custom
    target: all
    theme: custom
    commands:
      - task: git-branch
      - task: git-last-commit-msg
      - task: git-last-commit-date

  git-branch-develop:
    desc: checkout the dev or develop branch and come back to main
    spec: custom
    target: all
    theme: custom
    commands:
      - task: git-fetch
      - task: git-develop
      - task: git-pull
      - task: git-main
      - task: git-pull

  git-branch-dev:
    desc: checkout the dev or develop branch and come back to main
    spec: custom
    target: all
    theme: custom
    commands:
      - task: git-fetch
      - task: git-dev
      - task: git-pull
      - task: git-main
      - task: git-pull

  git-clone:
    desc: clone all the repositories
    spec: custom
    cmd: git clone

  git-status:
    desc: show working tree status
    spec: custom
    cmd: git status -s

  git-fetch:
    desc: fetch remote updates
    spec: custom
    cmd: git fetch --all

  git-fetch-pull:
    desc: fetch and pull remote updates
    spec: custom
    cmd: git fetch --all && git pull --all

  git-prune:
    desc: remove local branches which have been deleted on remote
    spec: custom
    env:
      remote: origin
    cmd: git remote prune $remote

  git-switch:
    desc: switch branch setting the env for this command (by default it's main)
    spec: custom
    env:
      branch: main
    cmd: git checkout $branch

  git-create:
    desc: create branch
    spec: custom
    cmd: git checkout -b $branch

  git-develop:
    desc: checkout develop branch
    spec: custom
    env:
      remote: origin
    cmd: git checkout develop

  git-dev:
    desc: checkout dev branch
    spec: custom
    cmd: git checkout dev

  git-main:
    desc: checkout main branch
    spec: custom
    cmd: git checkout main

  git-master:
    desc: checkout main branch
    spec: custom
    cmd: git checkout master

  git-change-origin:
    desc: change the origin of the repository
    spec: custom
    commands:
      # - name: remove old origin
      #   cmd: git remote remove origin
      - name: add new origin
        cmd: git remote set-url origin "${remote_url}"

  # git-delete:
  #   desc: delete branch
  #   spec: custom
  #   cmd: git branch -D $branch

  git-pull:
    desc: pull the changes
    spec: custom
    cmd: git pull --all

  git-last-commit-msg:
    desc: show last commit
    spec: custom
    cmd: git log -1 --pretty=%B

  git-last-commit-date:
    desc: show last commit date
    spec: custom
    cmd: |
      git log -1 --format="%cd (%cr)" -n 1 --date=format:"%d  %b %y" \
      | sed 's/ //'

  git-branch:
    desc: show current git branch
    spec: custom
    cmd: git rev-parse --abbrev-ref HEAD

  git-daily:
    desc: show branch, local and remote diffs, last commit and date
    spec: custom
    commands:
      - name: branch
        cmd: git rev-parse --abbrev-ref HEAD

      - name: status
        cmd: git status

      - name: local diff
        cmd: git diff --name-only | wc -l

      - name: remote diff
        cmd: |
          current_branch=$(git rev-parse --abbrev-ref HEAD)
          git diff "$current_branch" "origin/$current_branch" --name-only 2> /dev/null | wc -l

      - name: last commit
        cmd: git log -1 --pretty=%B

      - name: commit date
        cmd: git log -1 --format="%cd (%cr)" -n 1 --date=format:"%d  %b %y" | sed 's/ //'

##############################
###### PROJECT MAPPINGS ######
##############################

### PROJECTS
projects:
  PBG:
    path: .

  #### Bear
  bear:
    path: pbg/bear
    url: git@github.com:PythonBiellaGroup/Bear.git
    tags: [project, bear, pbg]
    env:
      remote_url: git@github.com:PythonBiellaGroup/Bear.git
